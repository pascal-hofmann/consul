// Code generated by protoc-gen-grpc-inmem. DO NOT EDIT.

package pbacl

import (
	"context"

	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

// compile-time check to ensure that the generator is implementing all
// of the grpc client interfaces methods.
var _ ACLServiceClient = &InmemACLServiceClient{}

// InmemACLServiceClient implements the ACLServiceClient interface by directly
// calling methods on the server implementation. This avoids unnecessary serialization
// and deserialization when the client and server are executing in the same process.
// The caveat to this performance optimization is that not all standard network
// based gRPC server options and client dialing options will be supported. The
// second caveat is that the caller needs to take care to ensure they don't modify
// shared data.
type InmemACLServiceClient struct {
	srv ACLServiceServer
}

// isInmemACLServiceClient is an interface that can be used to detect that a
// ACLServiceClient is actually using the in-memory transport.
type IsInmemACLServiceClient interface {
	IsInmemACLServiceClient() bool
}

func NewInmemACLServiceClient(srv ACLServiceServer) (ACLServiceClient, error) {
	return &InmemACLServiceClient{
		srv: srv,
	}, nil
}

// IsInmemACLServiceClient implements the IsInmemACLServiceClient interface. This
// can be used to detect that the in-memory transport is in use and alter
// behavior accordingly.
func (c InmemACLServiceClient) IsInmemACLServiceClient() bool {
	return true
}

func (c *InmemACLServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.Login(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *InmemACLServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.Logout(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// compile-time check to ensure that the generator is implementing all
// of the grpc client interfaces methods.
var _ ACLServiceClient = CloningACLServiceClient{}

// IsCloningACLServiceClient is an interface that can be used to detect
// that a ACLServiceClient is using the in-memory transport and has already
// been wrapped with a with a CloningACLServiceClient.
type IsCloningACLServiceClient interface {
	IsCloningACLServiceClient() bool
	IsInmemACLServiceClient
}

// CloningACLServiceClient implements the ACLServiceClient interface by wrapping
// another implementation and copying all protobuf messages that pass through the client.
// This is mainly useful to wrap the InmemACLServiceClient client to insulate users of that
// client from having to care about potential immutability of data they receive or having
// the server implementation mutate their internal memory.
type CloningACLServiceClient struct {
	ACLServiceClient
}

func NewCloningACLServiceClient(client ACLServiceClient) ACLServiceClient {
	if cloner, ok := client.(IsCloningACLServiceClient); ok && cloner.IsCloningACLServiceClient() {
		// prevent a double clone if the underlying client is already the cloning client.
		return client
	}

	if inmem, ok := client.(IsInmemACLServiceClient); !ok || !inmem.IsInmemACLServiceClient() {
		// when not using the in-mem transport we can assume that protobuf serialization and deserialization
		// is already occurring and prevent wrapping.
		return client
	}

	return CloningACLServiceClient{
		ACLServiceClient: client,
	}
}

// IsCloningACLServiceClient implements the IsCloningACLServiceClient interface. This
// is only used to detect wrapped clients that would be double cloning data and prevent that.
func (c CloningACLServiceClient) IsCloningACLServiceClient() bool {
	return true
}

func (c CloningACLServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	in = proto.Clone(in).(*LoginRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ACLServiceClient.Login(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*LoginResponse), nil
}

func (c CloningACLServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	in = proto.Clone(in).(*LogoutRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ACLServiceClient.Logout(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*LogoutResponse), nil
}
