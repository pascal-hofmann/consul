// Code generated by protoc-gen-grpc-inmem. DO NOT EDIT.

package pbresource

import (
	"context"

	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

// compile-time check to ensure that the generator is implementing all
// of the grpc client interfaces methods.
var _ ResourceServiceClient = &InmemResourceServiceClient{}

// InmemResourceServiceClient implements the ResourceServiceClient interface by directly
// calling methods on the server implementation. This avoids unnecessary serialization
// and deserialization when the client and server are executing in the same process.
// The caveat to this performance optimization is that not all standard network
// based gRPC server options and client dialing options will be supported. The
// second caveat is that the caller needs to take care to ensure they don't modify
// shared data.
type InmemResourceServiceClient struct {
	srv ResourceServiceServer
}

// isInmemResourceServiceClient is an interface that can be used to detect that a
// ResourceServiceClient is actually using the in-memory transport.
type IsInmemResourceServiceClient interface {
	IsInmemResourceServiceClient() bool
}

func NewInmemResourceServiceClient(srv ResourceServiceServer) (ResourceServiceClient, error) {
	return &InmemResourceServiceClient{
		srv: srv,
	}, nil
}

// IsInmemResourceServiceClient implements the IsInmemResourceServiceClient interface. This
// can be used to detect that the in-memory transport is in use and alter
// behavior accordingly.
func (c InmemResourceServiceClient) IsInmemResourceServiceClient() bool {
	return true
}

func (c *InmemResourceServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.Read(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *InmemResourceServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.Write(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *InmemResourceServiceClient) WriteStatus(ctx context.Context, in *WriteStatusRequest, opts ...grpc.CallOption) (*WriteStatusResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.WriteStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *InmemResourceServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *InmemResourceServiceClient) ListByOwner(ctx context.Context, in *ListByOwnerRequest, opts ...grpc.CallOption) (*ListByOwnerResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.ListByOwner(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *InmemResourceServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.srv.Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *InmemResourceServiceClient) WatchList(ctx context.Context, in *WatchListRequest, opts ...grpc.CallOption) (ResourceService_WatchListClient, error) {
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}
	st := newInmemStreamFromServer[*WatchEvent](ctx)
	go func() {
		st.CloseServerStream(c.srv.WatchList(in, st))
	}()

	return st, nil
}

// compile-time check to ensure that the generator is implementing all
// of the grpc client interfaces methods.
var _ ResourceServiceClient = CloningResourceServiceClient{}

// IsCloningResourceServiceClient is an interface that can be used to detect
// that a ResourceServiceClient is using the in-memory transport and has already
// been wrapped with a with a CloningResourceServiceClient.
type IsCloningResourceServiceClient interface {
	IsCloningResourceServiceClient() bool
	IsInmemResourceServiceClient
}

// CloningResourceServiceClient implements the ResourceServiceClient interface by wrapping
// another implementation and copying all protobuf messages that pass through the client.
// This is mainly useful to wrap the InmemResourceServiceClient client to insulate users of that
// client from having to care about potential immutability of data they receive or having
// the server implementation mutate their internal memory.
type CloningResourceServiceClient struct {
	ResourceServiceClient
}

func NewCloningResourceServiceClient(client ResourceServiceClient) ResourceServiceClient {
	if cloner, ok := client.(IsCloningResourceServiceClient); ok && cloner.IsCloningResourceServiceClient() {
		// prevent a double clone if the underlying client is already the cloning client.
		return client
	}

	if inmem, ok := client.(IsInmemResourceServiceClient); !ok || !inmem.IsInmemResourceServiceClient() {
		// when not using the in-mem transport we can assume that protobuf serialization and deserialization
		// is already occurring and prevent wrapping.
		return client
	}

	return CloningResourceServiceClient{
		ResourceServiceClient: client,
	}
}

// IsCloningResourceServiceClient implements the IsCloningResourceServiceClient interface. This
// is only used to detect wrapped clients that would be double cloning data and prevent that.
func (c CloningResourceServiceClient) IsCloningResourceServiceClient() bool {
	return true
}

func (c CloningResourceServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	in = proto.Clone(in).(*ReadRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ResourceServiceClient.Read(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*ReadResponse), nil
}

func (c CloningResourceServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	in = proto.Clone(in).(*WriteRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ResourceServiceClient.Write(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*WriteResponse), nil
}

func (c CloningResourceServiceClient) WriteStatus(ctx context.Context, in *WriteStatusRequest, opts ...grpc.CallOption) (*WriteStatusResponse, error) {
	in = proto.Clone(in).(*WriteStatusRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ResourceServiceClient.WriteStatus(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*WriteStatusResponse), nil
}

func (c CloningResourceServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	in = proto.Clone(in).(*ListRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ResourceServiceClient.List(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*ListResponse), nil
}

func (c CloningResourceServiceClient) ListByOwner(ctx context.Context, in *ListByOwnerRequest, opts ...grpc.CallOption) (*ListByOwnerResponse, error) {
	in = proto.Clone(in).(*ListByOwnerRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ResourceServiceClient.ListByOwner(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*ListByOwnerResponse), nil
}

func (c CloningResourceServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	in = proto.Clone(in).(*DeleteRequest)
	md, found := metadata.FromOutgoingContext(ctx)
	if found {
		ctx = metadata.NewIncomingContext(ctx, md)
	}

	out, err := c.ResourceServiceClient.Delete(ctx, in)
	if err != nil {
		return nil, err
	}

	return proto.Clone(out).(*DeleteResponse), nil
}

func (c CloningResourceServiceClient) WatchList(ctx context.Context, in *WatchListRequest, opts ...grpc.CallOption) (ResourceService_WatchListClient, error) {
	in = proto.Clone(in).(*WatchListRequest)
	st, err := c.ResourceServiceClient.WatchList(ctx, in)
	if err != nil {
		return nil, err
	}

	return newCloningStream[*WatchEvent](st), nil
}
